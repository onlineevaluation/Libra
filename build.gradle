buildscript {
    ext {
        kotlinVersion = '1.3.11'
        springBootVersion = '2.1.1.RELEASE'
        dokka_version = '0.9.17'
    }
    repositories {
        jcenter()
        mavenCentral()

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.10"
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.10"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'jacoco'

group = 'com.nuc'
version = '2.0.0'
sourceCompatibility = 11

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
//    jcenter()
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}


dependencies {
    // jpa
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-jdbc')
    // web
    implementation('org.springframework.boot:spring-boot-starter-web')
    // kotlin
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    // mysql 驱动
    runtimeOnly('mysql:mysql-connector-java')
    // swagger 2
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.8.0'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.8.0'
    // security
    implementation('org.springframework.boot:spring-boot-starter-security')
    //jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.0'
    // fastjson
    implementation('com.alibaba:fastjson:1.2.46')
    // RabbitMq
    implementation('org.springframework.boot:spring-boot-starter-amqp')
    // word 分词，词频
    compile group: 'com.hankcs', name: 'hanlp', version: 'portable-1.7.1'
    // sentry 日志监控
    implementation 'io.sentry:sentry-spring:1.7.16'
    // Kotlin-Reflect-Tools-For-JVM
    implementation 'wu.seal:kotlin-reflect-tools-for-jvm:1.1.2'
    // druid
    implementation 'com.alibaba:druid:1.1.12'
    // jna
    implementation 'net.java.dev.jna:jna:5.2.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test')

}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}


task codeCoverageReport(type: JacocoReport) {
    classDirectories = files('build/classes')
    sourceDirectories = files('src/main/kotlin')

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        // todo(这个有问题，无法提交测试结果)
        // xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}


check.dependsOn codeCoverageReport
